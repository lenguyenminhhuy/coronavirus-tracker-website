AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  coronavirus-tracker-website-dev-stack
  CloudFormation Template for SAM (Development Environment)

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Layers:
      - !Ref RuntimeDependenciesLayer
    Runtime: nodejs14.x
    Environment:
      Variables:
        # "Local" | "Dev" | "Prod"
        ENVIRONMENT_TYPE: 'Dev'
    MemorySize: 256
    Timeout: 180

Resources:
  # DynamoDB Email Subscription table
  EmailSubscriptionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: 'Email'
          KeyType: 'HASH'
        - AttributeName: 'CreatedAt'
          KeyType: 'RANGE'
      AttributeDefinitions:
        - AttributeName: 'Email'
          AttributeType: 'S'
        - AttributeName: 'CreatedAt'
          AttributeType: 'S'
      ProvisionedThroughput:
        ReadCapacityUnits: 1000
        WriteCapacityUnits: 10
      TableName: 'emailSubscription_Dev'

  ## Daily send email function ##
  SendDailyEmailFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/send-daily-email.handler
      Description: Daily scheduled email sending function to subscribers
      Role: !GetAtt SendDailyEmailIamRole.Arn
      PackageType: Zip
      Events:
        DailyScheduleRule:
          Type: Schedule
          Properties:
            Schedule: rate(2 minutes)

  # Role for Send Email function
  SendDailyEmailIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource: '*'
          PolicyName: SESFullAccess

        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                  - dynamodb:Scan
                Resource: !GetAtt EmailSubscriptionTable.Arn
          PolicyName: DynamoDBBasicAccess

        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - '*'
          PolicyName: AWSLambdaInvokeAccess

        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
          PolicyName: AWSLambdaBasicExecutionRole

  ## Subscribe email function ##
  SubscribeEmailFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/subscribe-email.handler
      Description: Daily scheduled email sending function to subscribers
      Role: !GetAtt SubscribeEmailIamRole.Arn
      PackageType: Zip
      Events:
        SubscribeEmailAPI:
          Type: Api
          Properties:
            Path: /subscribe
            Method: POST

  # Subscribe email IAM Role
  SubscribeEmailIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt EmailSubscriptionTable.Arn
          PolicyName: DynamoDBTableAccess
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource: '*'
          PolicyName: SESFullAccess

  ## Get Tweets function ##
  GetTweetsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-tweets.handler
      Description: Get tweets related to COVID-19
      Role: !GetAtt GetTweetsIamRole.Arn
      PackageType: Zip
      Events:
        GetTweetsAPI:
          Type: Api
          Properties:
            Path: /tweets
            Method: GET

  GetTweetsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'
          PolicyName: S3BucketFullAccess

  # Shared layer with Lambda runtime dependencies
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: 'coronavirus-tracker-website-dev-dependencies'
      Description: Node.js Runtime dependencies for Lambdas  (Dev Environment)
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete
# Created resources on AWS
Outputs:
  # Section for Covid test API
  EmailGateway:
    Description: 'API Gateway endpoint URL for Prod stage'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'

  # Section for SendDailyEmailFunction
  SendDailyEmailFunction:
    Description: 'Send Email Function ARN'
    Value: !GetAtt SendDailyEmailFunction.Arn

  # Section for SubscribeEmailFunction
  SubscribeEmailFunction:
    Description: 'Subscribe for Daily News Function ARN'
    Value: !GetAtt SubscribeEmailFunction.Arn

  # Section for DynamoDB Table of Email Subscription
  EmailSubscriptionTable:
    Description: "DynamoDB's Table for Email Subscriptions"
    Value: !GetAtt EmailSubscriptionTable.Arn

  # Section for Get Tweets function
  GetTweetsFunction:
    Description: 'Get list of Tweets in a specified date ARN'
    Value: !GetAtt GetTweetsFunction.Arn;
