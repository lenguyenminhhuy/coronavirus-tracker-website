AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  coronavirus-tracker-website
  CloudFormation Template for SAM (Prod Environment)

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Layers:
      - !Ref RuntimeDependenciesLayer
    Runtime: nodejs14.x
    Environment:
      Variables:
        # "Local" | "Dev" | "Prod"
        ENVIRONMENT_TYPE: 'Prod'
    MemorySize: 512
    Timeout: 900

Parameters:
  FirehoseS3Prefix:
    Type: String
    Default: firehose/
    Description: 'The S3 Key prefix for Kinesis Firehose.'
  FirehoseCompressionFormat:
    Type: String
    Default: GZIP
    AllowedValues: [UNCOMPRESSED, GZIP, Snappy]
    Description: 'Compression format used by Kinesis Firehose'
  FirehoseBufferingInterval:
    Type: Number
    Default: 60
    MinValue: 60
    MaxValue: 900
    Description: 'How long Firehose will wait before writing a new batch into S3'
  FirehoseBufferingSize:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 128
    Description: 'Maximum batch size in MB'

Resources:
  # DynamoDB Email Subscription table
  EmailSubscriptionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: 'Email'
          KeyType: 'HASH'
        - AttributeName: 'CreatedAt'
          KeyType: 'RANGE'
      AttributeDefinitions:
        - AttributeName: 'Email'
          AttributeType: 'S'
        - AttributeName: 'CreatedAt'
          AttributeType: 'S'
      ProvisionedThroughput:
        ReadCapacityUnits: 1000
        WriteCapacityUnits: 10
      TableName: 'emailSubscription_Prod'

  ## Daily send email function ##
  SendDailyEmailFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/send-daily-email.handler
      Description: Daily scheduled email sending function to subscribers
      Role: !GetAtt SendDailyEmailIamRole.Arn
      PackageType: Zip
      Events:
        DailyScheduleRule:
          Type: Schedule
          Properties:
            Schedule: cron(0 2 * * ? *)

  # Role for Send Email function
  SendDailyEmailIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource: '*'
          PolicyName: SESFullAccess

        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                  - dynamodb:Scan
                Resource: !GetAtt EmailSubscriptionTable.Arn
          PolicyName: DynamoDBBasicAccess

        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - '*'
          PolicyName: AWSLambdaInvokeAccess

        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
          PolicyName: AWSLambdaBasicExecutionRole

  ## Subscribe email function ##
  SubscribeEmailFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/subscribe-email.handler
      Description: Daily scheduled email sending function to subscribers
      Role: !GetAtt SubscribeEmailIamRole.Arn
      PackageType: Zip
      Events:
        SubscribeEmailAPI:
          Type: Api
          Properties:
            Path: /subscribe
            Method: POST

  # Subscribe email IAM Role
  SubscribeEmailIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt EmailSubscriptionTable.Arn
          PolicyName: DynamoDBTableAccess
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource: '*'
          PolicyName: SESFullAccess

    # ------------------------------------------TABLE----------------------------------------------------------
  CovidTimeSeriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'CovidTimeSeriesTable_Prod'
      KeySchema:
        - AttributeName: 'iso_code'
          KeyType: 'HASH'
      AttributeDefinitions:
        - AttributeName: 'iso_code'
          AttributeType: 'S'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # ------------------------------------END OF SCRAPING----------------------------------------------------------------

  UpdateHistoryFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 512
      Handler: dist/handlers/updateHistory.handler
      Description: A simple example function for Hello Covid API
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        UpdateAsia:
          Type: Schedule # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Schedule: 'cron(0 1 * * ? *)'
            Input: '{"continent": "Asia"}'
            Enabled: false
        UpdateEurope:
          Type: Schedule # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Schedule: 'cron(30 1 * * ? *)'
            Input: '{"continent": "Europe"}'
            Enabled: false
        UpdateSA:
          Type: Schedule # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Schedule: 'cron(0 2 * * ? *)'
            Input: '{"continent": "South America"}'
            Enabled: false
        UpdateNA:
          Type: Schedule # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Schedule: 'cron(30 2 * * ? *)'
            Input: '{"continent": "North America"}'
            Enabled: false
        UpdateAfrica:
          Type: Schedule # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Schedule: 'cron(0 3 * * ? *)'
            Input: '{"continent": "Africa"}'
            Enabled: false
        UpdateWorld:
          Type: Schedule # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Schedule: 'cron(30 3 * * ? *)'
            Input: '{"continent": "World"}'
            Enabled: false

  HistoryFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/history.handler
      Description: Get historic covid data of a country
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        CovidDataAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/history
            Method: GET

  GetCountryListFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/getCountryList.handler
      Description: Get historic covid data of a country
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        CovidDataAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/countries
            Method: GET
  # ------------------------------------SCRAPING PART----------------------------------------------------------------

  ScarpingDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/scraping.handler
      MemorySize: 4096
      Events:
        ScarpingApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/list
            Method: GET

  ScarpingData10Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/top10.handler
      MemorySize: 4096
      Events:
        Scarping10Api:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/list10
            Method: GET

  GetDailyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/covidDaily.handler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable, see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#dynamo-db-crud-policy
        - DynamoDBCrudPolicy:
            TableName: !Ref CovidTimeSeriesTable
      Environment:
        Variables:
          TABLE_NAME: !Ref CovidTimeSeriesTable
      Events:
        CheckWebsiteScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)

  GetDailyAPIFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/covidDailyAPI.handler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable, see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#dynamo-db-crud-policy
        - DynamoDBCrudPolicy:
            TableName: !Ref CovidTimeSeriesTable
      Environment:
        Variables:
          TABLE_NAME: !Ref CovidTimeSeriesTable
      Events:
        GetDataDailyAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/daily
            Method: GET

  IngestDataFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/tweets.handler
      Policies:
        - FirehoseCrudPolicy:
            DeliveryStreamName: !Ref DeliveryStream
      Events:
        CheckWebsiteScheduledEvent1:
          Type: Schedule
          Properties:
            Schedule: rate(10 minutes)

  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryStreamPolicy
    Properties:
      DeliveryStreamName: 'DeliveryStream'
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        Prefix: !Ref FirehoseS3Prefix
        BucketARN: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref S3Records
        BufferingHints:
          IntervalInSeconds: !Ref FirehoseBufferingInterval
          SizeInMBs: !Ref FirehoseBufferingSize
        CompressionFormat: !Ref FirehoseCompressionFormat
        RoleARN: !GetAtt DeliveryStreamRole.Arn

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  DeliveryStreamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeliveryStreamRole
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Records
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Records
                  - '*'
  ## Get Tweets function ##
  GetTweetsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-tweets.handler
      Description: Get tweets related to COVID-19
      Role: !GetAtt GetTweetsIamRole.Arn
      PackageType: Zip
      Events:
        SubscribeEmailAPI:
          Type: Api
          Properties:
            Path: /tweets
            Method: GET
  # Get Tweets IAM Role ##
  GetTweetsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'
          PolicyName: S3BucketFullAccess

  S3Records:
    Type: AWS::S3::Bucket

  # Shared layer with Lambda runtime dependencies
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: 'coronavirus-tracker-website-dependencies'
      Description: Node.js Runtime dependencies for Lambdas (Prod Environment)
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain
# # Created resources on AWS
# Outputs:
#   # Section for Covid test API
#   EmailGateway:
#     Description: "API Gateway endpoint URL for Prod stage"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

#   # Section for SendDailyEmailFunction
#   SendDailyEmailFunction:
#     Description: "Send Email Function ARN"
#     Value: !GetAtt SendDailyEmailFunction.Arn

#   # Section for SubscribeEmailFunction
#   SubscribeEmailFunction:
#     Description: "Subscribe for Daily News Function ARN"
#     Value: !GetAtt SubscribeEmailFunction.Arn

#   # ------------------------------SCRAPING PART-------------------------------------------------------
#   ScarpingDataFunction:
#     Description: "Scarping Lambda Function ARN"
#     Value: !GetAtt ScarpingDataFunction.Arn
#   ScarpingDataFunctionIamRole:
#     Description: "Implicit IAM Role created for Scarping function"
#     Value: !GetAtt ScarpingDataFunctionRole.Arn

#   ScarpingData10Function:
#     Description: "Scarping Lambda Function ARN"
#     Value: !GetAtt ScarpingData10Function.Arn
#   ScarpingData10FunctionIamRole:
#     Description: "Implicit IAM Role created for Scarping function"
#     Value: !GetAtt ScarpingData10FunctionRole.Arn

#   # Section for DynamoDB Table of Email Subscription
#   EmailSubscriptionTable:
#     Description: "DynamoDB's Table for Email Subscriptions"
#     Value: !GetAtt EmailSubscriptionTable.Arn
