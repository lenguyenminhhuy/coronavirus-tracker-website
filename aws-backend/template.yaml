AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  coronavirus-tracker-website
  CloudFormation Template for SAM (Prod Environment)

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Layers:
      - !Ref RuntimeDependenciesLayer
    Runtime: nodejs14.x
    Environment:
      Variables:
        # "Local" | "Dev" | "Prod"
        ENVIRONMENT_TYPE: "Prod"
    MemorySize: 512
    Timeout: 100

Resources:
  # DynamoDB Email Subscription table
  EmailSubscriptionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: "Email"
          KeyType: "HASH"
        - AttributeName: "CreatedAt"
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "Email"
          AttributeType: "S"
        - AttributeName: "CreatedAt"
          AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: 1000
        WriteCapacityUnits: 10
      TableName: "emailSubscription"

  ## Daily send email function ##
  SendDailyEmailFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/send-daily-email.handler
      Description: Daily scheduled email sending function to subscribers
      Role: !GetAtt SendDailyEmailIamRole.Arn
      PackageType: Zip
      Events:
        DailyScheduleRule:
          Type: Schedule
          Properties:
            Schedule: rate(24 hours)

  # Role for Send Email function
  SendDailyEmailIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource: "*"
          PolicyName: SESFullAccess

        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                  - dynamodb:Scan
                Resource: !GetAtt EmailSubscriptionTable.Arn
          PolicyName: DynamoDBBasicAccess

        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"
          PolicyName: AWSLambdaBasicExecutionRole

  ## Subscribe email function ##
  SubscribeEmailFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/subscribe-email.handler
      Description: Daily scheduled email sending function to subscribers
      Role: !GetAtt SubscribeEmailIamRole.Arn
      PackageType: Zip
      Events:
        SubscribeEmailAPI:
          Type: Api
          Properties:
            Path: /subscribe
            Method: POST

  # Subscribe email IAM Role
  SubscribeEmailIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt EmailSubscriptionTable.Arn
          PolicyName: DynamoDBTableAccess
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource: "*"
          PolicyName: SESFullAccess

  # Shared layer with Lambda runtime dependencies
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: "coronavirus-tracker-website-dependencies"
      Description: Node.js Runtime dependencies for Lambdas (Prod Environment)
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain
  

  # ------------------------------------SCRAPING PART----------------------------------------------------------------
  # GeneralPuppeteerLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #       LayerName: GeneralPuppeteerLayer
  #       Description: Hold Puppeteer library and node modules
  #       ContentUri: layers/puppeteer/
  #       CompatibleRuntimes:
  #       - nodejs14.x
  #   Metadata:
  #     BuildMethod: nodejs14.x
  
  BrowserAndUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: BrowserAndUtilsLayer
      Description: Holds helper functions for application
      ContentUri: dist/utils/
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete

  ScarpingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/scraping.handler
      MemorySize: 4096
      Layers:
        - !Ref BrowserAndUtilsLayer
      Events:
        ScarpingApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/getList/
            Method: get
    
    # ------------------------------------------TABLE----------------------------------------------------------
  CovidTimeSeriesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "CovidTimeSeriesTable1"
      KeySchema: 
        - AttributeName: "iso_code"
          KeyType: "HASH"
        - AttributeName: "updated_date"
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "iso_code"
          AttributeType: "S"
        - AttributeName: "updated_date"
          AttributeType: "S"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  GetDataDailyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/covidDaily.handler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable, see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#dynamo-db-crud-policy
        - DynamoDBCrudPolicy:
            TableName: !Ref CovidTimeSeriesTable
      Environment:
        Variables:
          TABLE_NAME: !Ref CovidTimeSeriesTable
      Events:
        CheckWebsiteScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)


  GetDataDailyAPIFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/covidDailyAPI.handler
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable, see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#dynamo-db-crud-policy
        - DynamoDBCrudPolicy:
            TableName: !Ref CovidTimeSeriesTable
      Environment:
        Variables:
          TABLE_NAME: !Ref CovidTimeSeriesTable
      Events:
        GetDataDailyAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/getDaily/
            Method: get




  # ------------------------------------END OF SCRAPING----------------------------------------------------------------

# Created resources on AWS
Outputs:
  # Section for Covid test API
  EmailGateway:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  # Section for SendDailyEmailFunction
  SendDailyEmailFunction:
    Description: "Send Email Function ARN"
    Value: !GetAtt SendDailyEmailFunction.Arn

  # Section for SubscribeEmailFunction
  SubscribeEmailFunction:
    Description: "Subscribe for Daily News Function ARN"
    Value: !GetAtt SubscribeEmailFunction.Arn
  
  # ------------------------------SCRAPING PART-------------------------------------------------------
  ScarpingApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/api/getList/"
  ScarpingFunction:
    Description: "Scarping Lambda Function ARN"
    Value: !GetAtt ScarpingFunction.Arn
  ScarpingFunctionIamRole:
    Description: "Implicit IAM Role created for Scarping function"
    Value: !GetAtt ScarpingFunctionRole.Arn
  # ------------------------------------END OF SCRAPING----------------------------------------------------------------
  
  # ------------------------------------------------INSERT AND VIEW DAILY DATA--------------------------------------------------------
  GetDataDailyFunction:
    Description: "Covid Lambda Function ARN"
    Value: !GetAtt GetDataDailyFunction.Arn

  GetDataDailyFunctionIamRole:
    Description: "Implicit IAM Role created for Covid Function"
    Value: !GetAtt GetDataDailyFunctionRole.Arn
  
  GetDataDailyAPI:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/api/getList/"

  GetDataDailyAPIFunction:
    Description: "Covid Lambda Function ARN"
    Value: !GetAtt GetDataDailyAPIFunction.Arn

  GetDataDailyAPIFunctionIamRole:
    Description: "Implicit IAM Role created for Covid Function"
    Value: !GetAtt GetDataDailyAPIFunctionRole.Arn
  
  # ------------------------------------------------END INSERT AND VIEW DAILY DATA--------------------------------------------------------
  # Section for DynamoDB Table of Email Subscription
  EmailSubscriptionTable:
    Description: "DynamoDB's Table for Email Subscriptions"
    Value: !GetAtt EmailSubscriptionTable.Arn